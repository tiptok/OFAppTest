// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Position.proto

package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TermPosition struct {
	SimNum               *string  `protobuf:"bytes,1,req,name=SimNum" json:"SimNum,omitempty"`
	GpsTime              *int64   `protobuf:"varint,2,req,name=GpsTime" json:"GpsTime,omitempty"`
	Lon                  *float64 `protobuf:"fixed64,3,req,name=Lon" json:"Lon,omitempty"`
	Lat                  *float64 `protobuf:"fixed64,4,req,name=Lat" json:"Lat,omitempty"`
	Speed                *float64 `protobuf:"fixed64,5,req,name=Speed" json:"Speed,omitempty"`
	ADRSpeed             *float64 `protobuf:"fixed64,6,req,name=ADRSpeed" json:"ADRSpeed,omitempty"`
	Mileage              *float64 `protobuf:"fixed64,7,req,name=Mileage" json:"Mileage,omitempty"`
	Direction            *int32   `protobuf:"varint,8,req,name=Direction" json:"Direction,omitempty"`
	Altitude             *int32   `protobuf:"varint,9,req,name=Altitude" json:"Altitude,omitempty"`
	StateFlag            *int64   `protobuf:"varint,10,req,name=StateFlag" json:"StateFlag,omitempty"`
	AlarmFlag            *int64   `protobuf:"varint,11,req,name=AlarmFlag" json:"AlarmFlag,omitempty"`
	LimitSpeed           *int64   `protobuf:"varint,12,req,name=LimitSpeed" json:"LimitSpeed,omitempty"`
	MediaType            *int32   `protobuf:"varint,13,req,name=MediaType" json:"MediaType,omitempty"`
	MediaFormatCode      *int32   `protobuf:"varint,14,req,name=MediaFormatCode" json:"MediaFormatCode,omitempty"`
	MediaData            []byte   `protobuf:"bytes,15,req,name=MediaData" json:"MediaData,omitempty"`
	RecvTime             *int64   `protobuf:"varint,16,req,name=RecvTime" json:"RecvTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermPosition) Reset()         { *m = TermPosition{} }
func (m *TermPosition) String() string { return proto.CompactTextString(m) }
func (*TermPosition) ProtoMessage()    {}
func (*TermPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_Position_89f98a0550e6567a, []int{0}
}
func (m *TermPosition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermPosition.Unmarshal(m, b)
}
func (m *TermPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermPosition.Marshal(b, m, deterministic)
}
func (dst *TermPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermPosition.Merge(dst, src)
}
func (m *TermPosition) XXX_Size() int {
	return xxx_messageInfo_TermPosition.Size(m)
}
func (m *TermPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_TermPosition.DiscardUnknown(m)
}

var xxx_messageInfo_TermPosition proto.InternalMessageInfo

func (m *TermPosition) GetSimNum() string {
	if m != nil && m.SimNum != nil {
		return *m.SimNum
	}
	return ""
}

func (m *TermPosition) GetGpsTime() int64 {
	if m != nil && m.GpsTime != nil {
		return *m.GpsTime
	}
	return 0
}

func (m *TermPosition) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *TermPosition) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *TermPosition) GetSpeed() float64 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *TermPosition) GetADRSpeed() float64 {
	if m != nil && m.ADRSpeed != nil {
		return *m.ADRSpeed
	}
	return 0
}

func (m *TermPosition) GetMileage() float64 {
	if m != nil && m.Mileage != nil {
		return *m.Mileage
	}
	return 0
}

func (m *TermPosition) GetDirection() int32 {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return 0
}

func (m *TermPosition) GetAltitude() int32 {
	if m != nil && m.Altitude != nil {
		return *m.Altitude
	}
	return 0
}

func (m *TermPosition) GetStateFlag() int64 {
	if m != nil && m.StateFlag != nil {
		return *m.StateFlag
	}
	return 0
}

func (m *TermPosition) GetAlarmFlag() int64 {
	if m != nil && m.AlarmFlag != nil {
		return *m.AlarmFlag
	}
	return 0
}

func (m *TermPosition) GetLimitSpeed() int64 {
	if m != nil && m.LimitSpeed != nil {
		return *m.LimitSpeed
	}
	return 0
}

func (m *TermPosition) GetMediaType() int32 {
	if m != nil && m.MediaType != nil {
		return *m.MediaType
	}
	return 0
}

func (m *TermPosition) GetMediaFormatCode() int32 {
	if m != nil && m.MediaFormatCode != nil {
		return *m.MediaFormatCode
	}
	return 0
}

func (m *TermPosition) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *TermPosition) GetRecvTime() int64 {
	if m != nil && m.RecvTime != nil {
		return *m.RecvTime
	}
	return 0
}

func init() {
	proto.RegisterType((*TermPosition)(nil), "model.TermPosition")
}

func init() { proto.RegisterFile("Position.proto", fileDescriptor_Position_89f98a0550e6567a) }

var fileDescriptor_Position_89f98a0550e6567a = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0x80, 0x59, 0x6a, 0xf7, 0x73, 0x9c, 0xdb, 0x08, 0x22, 0x07, 0x11, 0x29, 0x5e, 0xe5, 0xca,
	0x77, 0x18, 0x8e, 0x79, 0xb3, 0x89, 0x64, 0x7b, 0x81, 0xb0, 0x1e, 0x46, 0xa0, 0x59, 0x4a, 0x97,
	0x09, 0xbe, 0xa1, 0x8f, 0x25, 0x39, 0x5d, 0x53, 0xf1, 0xae, 0xdf, 0xf7, 0x35, 0xe9, 0x39, 0x14,
	0x66, 0x9f, 0xfe, 0x6c, 0x83, 0xf5, 0xa7, 0xd7, 0xba, 0xf1, 0xc1, 0xcb, 0xdc, 0xf9, 0x92, 0xaa,
	0x97, 0x9f, 0x0c, 0xa6, 0x7b, 0x6a, 0x5c, 0x57, 0xe5, 0x03, 0x0c, 0x77, 0xd6, 0x7d, 0x5c, 0x1c,
	0x0e, 0x0a, 0xa1, 0x26, 0xfa, 0x4a, 0x12, 0x61, 0xf4, 0x5e, 0x9f, 0xf7, 0xd6, 0x11, 0x8a, 0x42,
	0xa8, 0x4c, 0x77, 0x28, 0x17, 0x90, 0x6d, 0xfc, 0x09, 0xb3, 0x42, 0xa8, 0x81, 0x8e, 0x8f, 0x6c,
	0x4c, 0xc0, 0x9b, 0xab, 0x31, 0x41, 0xde, 0x43, 0xbe, 0xab, 0x89, 0x4a, 0xcc, 0xd9, 0xb5, 0x20,
	0x1f, 0x61, 0xbc, 0x5c, 0xe9, 0x36, 0x0c, 0x39, 0x24, 0x8e, 0xdf, 0xdb, 0xda, 0x8a, 0xcc, 0x91,
	0x70, 0xc4, 0xa9, 0x43, 0xf9, 0x04, 0x93, 0x95, 0x6d, 0xe8, 0x10, 0xc7, 0xc5, 0x71, 0x21, 0x54,
	0xae, 0x7b, 0xc1, 0x77, 0x56, 0xc1, 0x86, 0x4b, 0x49, 0x38, 0xe1, 0x98, 0x38, 0x9e, 0xdc, 0x05,
	0x13, 0x68, 0x5d, 0x99, 0x23, 0x02, 0x6f, 0xd1, 0x8b, 0x58, 0x97, 0x95, 0x69, 0x1c, 0xd7, 0xdb,
	0xb6, 0x26, 0x21, 0x9f, 0x01, 0x36, 0xd6, 0xd9, 0xd0, 0x4e, 0x3b, 0xe5, 0xfc, 0xc7, 0xc4, 0xd3,
	0x5b, 0x2a, 0xad, 0xd9, 0x7f, 0xd7, 0x84, 0x77, 0xed, 0x54, 0x49, 0x48, 0x05, 0x73, 0x86, 0xb5,
	0x6f, 0x9c, 0x09, 0x6f, 0xbe, 0x24, 0x9c, 0xf1, 0x3b, 0xff, 0x75, 0xba, 0x67, 0x65, 0x82, 0xc1,
	0x79, 0x21, 0xd4, 0x54, 0xf7, 0x22, 0x6e, 0xa7, 0xe9, 0xf0, 0xc5, 0xbf, 0x61, 0xc1, 0x33, 0x24,
	0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x18, 0x8e, 0x29, 0xe2, 0x01, 0x00, 0x00,
}
