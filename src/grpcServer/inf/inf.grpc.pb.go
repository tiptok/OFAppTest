// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inf.grpc.proto

package inf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserReq) Reset()         { *m = UserReq{} }
func (m *UserReq) String() string { return proto.CompactTextString(m) }
func (*UserReq) ProtoMessage()    {}
func (*UserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e6fbc8c03663535, []int{0}
}

func (m *UserReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReq.Unmarshal(m, b)
}
func (m *UserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReq.Marshal(b, m, deterministic)
}
func (m *UserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReq.Merge(m, src)
}
func (m *UserReq) XXX_Size() int {
	return xxx_messageInfo_UserReq.Size(m)
}
func (m *UserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserReq proto.InternalMessageInfo

func (m *UserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserRsp struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRsp) Reset()         { *m = UserRsp{} }
func (m *UserRsp) String() string { return proto.CompactTextString(m) }
func (*UserRsp) ProtoMessage()    {}
func (*UserRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e6fbc8c03663535, []int{1}
}

func (m *UserRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRsp.Unmarshal(m, b)
}
func (m *UserRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRsp.Marshal(b, m, deterministic)
}
func (m *UserRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRsp.Merge(m, src)
}
func (m *UserRsp) XXX_Size() int {
	return xxx_messageInfo_UserRsp.Size(m)
}
func (m *UserRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserRsp proto.InternalMessageInfo

func (m *UserRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*UserReq)(nil), "inf.UserReq")
	proto.RegisterType((*UserRsp)(nil), "inf.UserRsp")
}

func init() { proto.RegisterFile("inf.grpc.proto", fileDescriptor_3e6fbc8c03663535) }

var fileDescriptor_3e6fbc8c03663535 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x4b, 0xd3,
	0x4b, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0xcc, 0x4b, 0x53,
	0x52, 0xe4, 0x62, 0x0f, 0x2d, 0x4e, 0x2d, 0x0a, 0x4a, 0x2d, 0x14, 0x12, 0xe3, 0x62, 0x2b, 0x2d,
	0x4e, 0x2d, 0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf2, 0x94, 0x64, 0xa1,
	0x4a, 0x8a, 0x0b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0xc1, 0x0a, 0x38, 0x83, 0xc0,
	0x6c, 0x23, 0x43, 0x2e, 0x0e, 0x90, 0xb4, 0x4b, 0x62, 0x49, 0xa2, 0x90, 0x2a, 0x17, 0xbb, 0x7b,
	0x6a, 0x09, 0x88, 0x2b, 0xc4, 0xa3, 0x07, 0xb2, 0x0e, 0x6a, 0xb6, 0x14, 0x12, 0xaf, 0xb8, 0x20,
	0x89, 0x0d, 0xec, 0x00, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x02, 0xe3, 0x77, 0x92,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserDataClient is the client API for UserData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserDataClient interface {
	GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRsp, error)
}

type userDataClient struct {
	cc *grpc.ClientConn
}

func NewUserDataClient(cc *grpc.ClientConn) UserDataClient {
	return &userDataClient{cc}
}

func (c *userDataClient) GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRsp, error) {
	out := new(UserRsp)
	err := c.cc.Invoke(ctx, "/inf.UserData/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataServer is the server API for UserData service.
type UserDataServer interface {
	GetUser(context.Context, *UserReq) (*UserRsp, error)
}

func RegisterUserDataServer(s *grpc.Server, srv UserDataServer) {
	s.RegisterService(&_UserData_serviceDesc, srv)
}

func _UserData_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.UserData/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).GetUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inf.UserData",
	HandlerType: (*UserDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserData_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inf.grpc.proto",
}
